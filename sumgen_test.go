package main_test

import (
	"bytes"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"testing"
)

func TestSumgen(t *testing.T) {
	prog := []byte(`
package a
import "io"
type A interface {
	m1([]byte) error
	m2(r io.Reader)
}
type B int
type C int
func(_ B) m1([]byte) error { return nil }
`)
	want := []byte(`// Code generated by "sumgen"; DO NOT EDIT.

package a

import "io"

func (_ B) m2(r io.Reader)   { panic("default implementation") }
func (_ *C) m1([]byte) error { panic("default implementation") }
func (_ *C) m2(r io.Reader)  { panic("default implementation") }
`)

	dir, err := ioutil.TempDir("", "sumgen")
	if err != nil {
		t.Fatal(err)
	}
	defer os.RemoveAll(dir)
	file := filepath.Join(dir, "a.go")
	if err := ioutil.WriteFile(file, []byte(prog), 0755); err != nil {
		t.Fatal(err)
	}
	cmd := exec.Command("sumgen", "A = B | *C")
	cmd.Dir = dir
	if err := cmd.Run(); err != nil {
		t.Fatal(err)
	}
	b, err := ioutil.ReadFile(filepath.Join(dir, filepath.Base(dir)+"_sumgen.go"))
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(b, want) {
		t.Errorf("\nGOT\n----\n%s\n----\nWANT\n----\n%s\n----", b, want)
	}
}
